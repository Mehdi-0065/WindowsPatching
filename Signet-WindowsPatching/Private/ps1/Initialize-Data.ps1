<#
.SYNOPSIS
    Retrieves and decrypts credentials from a JSON configuration file.

.DESCRIPTION
    The Get-DecryptedCredentials function loads a JSON configuration file, retrieves the encrypted values, and decrypts them using ConvertTo-SecureString. 
    The decrypted credentials are then converted to plaintext and returned as a hashtable.
    when you import this module the initial data will be created and be ready for your script to use.

    This file generate the environment value as below:
    $env:APEX_APIURI_PUT = "https://apex.cloud.jewels.com/ords/production/host_last_patch_info/"
    $env:APEX_USERNAME = "svc_patching_auto"
    $env:APEX_APIURI_GET = "https://apex.cloud.jewels.com/ords/production/host_patch_info/hostpatchdetails"
    $env:APEX_tokenEndpoint = "https://apex.cloud.jewels.com/ords/production/oauth/token"
    $env:Main_Patching_List = "\\isilon01.jewels.com\patching$\Windows\PatchList\Patching_list_Windows_2016_2019.csv"
    $env:Main_log_path = "\\isilon01.jewels.com\patching$\Windows\Logs"
    $env:Main_Patching_Path = "\\isilon01.jewels.com\patching$\Windows\PatchList"
    $env:Nagios_APIKey_Akron
    $env:Nagios_APIKey_Irving


.PARAMETER KeyPath
    Specifies the path to the JSON configuration file.

.EXAMPLE
    
.NOTES
    Author: Mehdi Rezaei (mehdi.rezaei@signetjewelers.com)
    Version: 1.0
    Date: 18th March, 2024



#>

# Set your API key as an environment variable
#. $PSScriptRoot\Get-DecryptedCredentials.ps1
#the keys must be generated by Admin and stored in the keys folder of your project
#the keys are encrypted and can be decrypted using the Get-DecryptedCredentials function
#the keys are then set as environment variables so they can be accessed throughout the application
$key_path = "\\isilon01.jewels.com\patching$\Windows\Keys"

$env:APEX_APIURI_PUT = "https://apex.cloud.jewels.com/ords/production/host_last_patch_info/"

$env:APEX_APIURI_GET = "https://apex.cloud.jewels.com/ords/production/host_patch_info/hostpatchdetails"


$env:APEX_tokenEndpoint = "https://apex.cloud.jewels.com/ords/production/oauth/token"

$env:Main_Patching_List = "\\isilon01.jewels.com\patching$\Windows\PatchList\Patching_list_Windows_2016_2019.csv"
$env:Main_log_path = "\\isilon01.jewels.com\patching$\Windows\Logs"
$env:Main_Patching_Path = "\\isilon01.jewels.com\patching$\Windows\PatchList"
$env:Main_PatchingFiles_Path = "\\isilon01.jewels.com\patching$\Windows\PatchFiles"

$env:NagiosAkronURL = "https://rhesprodmon01.sterling.com/nagiosxi/api/v1/system/scheduleddowntime"
$env:NagiosIrvingURL = "https://lvadmnagap02.irving.zalecorp.com/nagiosxi/api/v1/system/scheduleddowntime"

$Script:credential = Get-Credential -Message "Please provide the credential that you need to use for patching process"

# service account = SVC_Patching_Auto
. $PWD\Private\ps1\Get-DecryptedCredentials.ps1
. $PWD\Private\ps1\Get-APEX-Token.ps1
$EncryptedFiles = @("APEX_API_Get.json", "APEX_API_Put.json")
foreach ($file in $EncryptedFiles) {
    Write-Host $file
}
foreach ($file in $EncryptedFiles) {
    
    $KeyPath = Join-Path -Path $key_path -ChildPath $file
    if (Test-Path $KeyPath) {
        
       
        # Usage:
        try {
            $decryptedCredentials = Get-DecryptedCredentials -KeyPath $KeyPath -ErrorAction Stop
        }
        catch {
            Write-Host "Error: $_"
        }
        
        # Call the API with the decrypted credentials
        if ($file -match "Get") {
            #get the API key for the GET request from a file on disk
            $APEX_ClientId_GET = $decryptedCredentials.ClientId
            $APEX_clientSecret_GET = $decryptedCredentials.ClientSecret
            $env:AccessToken_Get = Get-APEX-Token -clientId $APEX_ClientId_GET -clientSecret $APEX_clientSecret_GET -tokenEndpoint $env:APEX_tokenEndpoint
        }
        elseif ($file -match "Put") {
            #Get the API key for the PUT request from a file on disk
            $APEX_ClientId_PUT = $decryptedCredentials.ClientId
            $APEX_clientSecret_PUT = $decryptedCredentials.ClientSecret
            $env:AccessToken_Put = Get-APEX-Token -clientId $APEX_ClientId_PUT -clientSecret $APEX_clientSecret_PUT -tokenEndpoint $env:APEX_tokenEndpoint
        }
        else {
            Write-Error "No match"
        }
    }
    else {
        Write-Host "File does not exist or the current user doesn't have permission to access it. Please reach out to the Admin."
        break
    }
}



$Nagios_Keys = Get-ChildItem -Path $key_path | Where-Object { $_.Name -match "Nagios" } | ForEach-Object {
    $NagiosKey = $_.BaseName
    
    $NagiosKeyPath = Join-Path -Path $key_path -ChildPath "$NagiosKey.json"
    
    if (Test-Path $NagiosKeyPath) {
        $decryptedNagiosKey = Get-DecryptedCredentials -KeyPath $NagiosKeyPath
        
        if ($NagiosKey -match "Akron") {
            $env:Nagios_APIKey_Akron = $decryptedNagiosKey
        }
        elseif ($NagiosKey -match "Irving") {
            $env:Nagios_APIKey_Irving = $decryptedNagiosKey
        }
        else {
            Write-Error "No match"
        }
    }
    else {
        Write-Host "File does not exist or the current user doesn't have permission to access it. Please reach out to the Admin."
        break
    }
}


write-host $script:ModuleRoot -BackgroundColor Yellow
write-host $script:ModuleRoot -BackgroundColor Cyan